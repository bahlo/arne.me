---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import Rating from "../../components/Rating.astro";
import { READING_TITLE, READING_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

const books = (await getCollection("reading"))
  .sort((a, b) => b.data.dateRead.valueOf() - a.data.dateRead.valueOf())
  .reduce((acc, book) => {
    const year = book.data.dateRead.getFullYear();
    if (acc[year]) {
      acc[year].push(book);
    } else {
      acc[year] = [book];
    }
    return acc;
  }, {});
---

<!DOCTYPE html>
<html lang="en" class="reading">
  <head>
    <BaseHead title={READING_TITLE} description={READING_DESCRIPTION} image="/reading/og-image.png" themeColor="#ce5c00" />
  </head>
  <body>
    <Header />
    <main id="main">
      <section class="stack">
        <h1>Reading</h1>
        <p>All the books Iâ€™ve read since March 2023:</p>
        <div class="stack-small">
          {
            Object.keys(books)
              .sort((a, b) => b - a)
              .map((year) => (
                <>
                  <h2>{year}</h2>
                  <>
                    {books[year].map((book) => (
                      <>
                        <h3>
                          <a href={`/reading/${book.slug}/`}>{book.data.title}</a>
                        </h3>
                        <div class="meta">
                          {book.data.author} &middot; Read on{" "}
                          <FormattedDate date={book.data.dateRead} /> &middot;
                          <Rating rating={book.data.rating} />
                        </div>
                      </>
                    ))}
                  </>
                </>
              ))
          }
        </div>
      </section>
    </main>
    <Footer />
  </body>
</html>
